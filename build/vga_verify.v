/* Generated by Amaranth Yosys 0.40 (PyPI ver 0.40.0.0.post101, git sha1 a1bb0255d) */

(* top =  1  *)
(* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:23" *)
(* generator = "Amaranth" *)
module vga_verify(clk, rst, produce__data, produce__valid, produce__vsync, produce__ready);
  reg \$auto$verilog_backend.cc:2352:dump_module$1  = 0;
  wire \$1 ;
  reg \$10 ;
  reg [8:0] \$11 ;
  wire \$2 ;
  wire \$3 ;
  wire \$4 ;
  wire [9:0] \$5 ;
  wire \$6 ;
  wire [9:0] \$7 ;
  reg \$8 ;
  reg [8:0] \$9 ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input clk;
  wire clk;
  (* init = 9'h000 *)
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:39" *)
  wire [8:0] counter;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  reg fsm_state = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:32" *)
  reg [8:0] pix_counter = 9'h000;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:33" *)
  wire pix_last;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:30" *)
  output [11:0] produce__data;
  wire [11:0] produce__data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:18" *)
  wire [3:0] \produce__data.b ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:18" *)
  wire [3:0] \produce__data.g ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:18" *)
  wire [3:0] \produce__data.r ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\signature.py:19" *)
  input produce__ready;
  wire produce__ready;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\signature.py:18" *)
  output produce__valid;
  reg produce__valid = 1'h0;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:33" *)
  output produce__vsync;
  wire produce__vsync;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:240" *)
  reg [8:0] read_port__addr = 9'h000;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:30" *)
  wire [11:0] read_port__data;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:30" *)
  wire [3:0] \read_port__data.b ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:30" *)
  wire [3:0] \read_port__data.g ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:30" *)
  wire [3:0] \read_port__data.r ;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\lib\\memory.py:239" *)
  reg read_port__en;
  (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_ir.py:283" *)
  input rst;
  wire rst;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:28" *)
  reg [11:0] mem [319:0];
  initial begin
    mem[0] = 12'h00f;
    mem[1] = 12'h00f;
    mem[2] = 12'h00f;
    mem[3] = 12'h00f;
    mem[4] = 12'h00f;
    mem[5] = 12'h00f;
    mem[6] = 12'h00f;
    mem[7] = 12'h00f;
    mem[8] = 12'h00f;
    mem[9] = 12'h00f;
    mem[10] = 12'h00f;
    mem[11] = 12'h00f;
    mem[12] = 12'h00f;
    mem[13] = 12'h00f;
    mem[14] = 12'h00f;
    mem[15] = 12'h00f;
    mem[16] = 12'h00f;
    mem[17] = 12'h00f;
    mem[18] = 12'h00f;
    mem[19] = 12'h00f;
    mem[20] = 12'h00f;
    mem[21] = 12'h00f;
    mem[22] = 12'h00f;
    mem[23] = 12'h00f;
    mem[24] = 12'h00f;
    mem[25] = 12'h00f;
    mem[26] = 12'h00f;
    mem[27] = 12'h00f;
    mem[28] = 12'h00f;
    mem[29] = 12'h00f;
    mem[30] = 12'h00f;
    mem[31] = 12'h00f;
    mem[32] = 12'h00f;
    mem[33] = 12'h00f;
    mem[34] = 12'h00f;
    mem[35] = 12'h00f;
    mem[36] = 12'h00f;
    mem[37] = 12'h00f;
    mem[38] = 12'h00f;
    mem[39] = 12'h00f;
    mem[40] = 12'hf00;
    mem[41] = 12'hf00;
    mem[42] = 12'hf00;
    mem[43] = 12'hf00;
    mem[44] = 12'hf00;
    mem[45] = 12'hf00;
    mem[46] = 12'hf00;
    mem[47] = 12'hf00;
    mem[48] = 12'hf00;
    mem[49] = 12'hf00;
    mem[50] = 12'hf00;
    mem[51] = 12'hf00;
    mem[52] = 12'hf00;
    mem[53] = 12'hf00;
    mem[54] = 12'hf00;
    mem[55] = 12'hf00;
    mem[56] = 12'hf00;
    mem[57] = 12'hf00;
    mem[58] = 12'hf00;
    mem[59] = 12'hf00;
    mem[60] = 12'hf00;
    mem[61] = 12'hf00;
    mem[62] = 12'hf00;
    mem[63] = 12'hf00;
    mem[64] = 12'hf00;
    mem[65] = 12'hf00;
    mem[66] = 12'hf00;
    mem[67] = 12'hf00;
    mem[68] = 12'hf00;
    mem[69] = 12'hf00;
    mem[70] = 12'hf00;
    mem[71] = 12'hf00;
    mem[72] = 12'hf00;
    mem[73] = 12'hf00;
    mem[74] = 12'hf00;
    mem[75] = 12'hf00;
    mem[76] = 12'hf00;
    mem[77] = 12'hf00;
    mem[78] = 12'hf00;
    mem[79] = 12'hf00;
    mem[80] = 12'hf00;
    mem[81] = 12'hf00;
    mem[82] = 12'hf00;
    mem[83] = 12'hf00;
    mem[84] = 12'hf00;
    mem[85] = 12'hf00;
    mem[86] = 12'hf00;
    mem[87] = 12'hf00;
    mem[88] = 12'hf00;
    mem[89] = 12'hf00;
    mem[90] = 12'hf00;
    mem[91] = 12'hf00;
    mem[92] = 12'hf00;
    mem[93] = 12'hf00;
    mem[94] = 12'hf00;
    mem[95] = 12'hf00;
    mem[96] = 12'hf00;
    mem[97] = 12'hf00;
    mem[98] = 12'hf00;
    mem[99] = 12'hf00;
    mem[100] = 12'h0f0;
    mem[101] = 12'h0f0;
    mem[102] = 12'h0f0;
    mem[103] = 12'h0f0;
    mem[104] = 12'h0f0;
    mem[105] = 12'h0f0;
    mem[106] = 12'h0f0;
    mem[107] = 12'h0f0;
    mem[108] = 12'h0f0;
    mem[109] = 12'h0f0;
    mem[110] = 12'h0f0;
    mem[111] = 12'h0f0;
    mem[112] = 12'h0f0;
    mem[113] = 12'h0f0;
    mem[114] = 12'h0f0;
    mem[115] = 12'h0f0;
    mem[116] = 12'h0f0;
    mem[117] = 12'h0f0;
    mem[118] = 12'h0f0;
    mem[119] = 12'h0f0;
    mem[120] = 12'h0f0;
    mem[121] = 12'h0f0;
    mem[122] = 12'h0f0;
    mem[123] = 12'h0f0;
    mem[124] = 12'h0f0;
    mem[125] = 12'h0f0;
    mem[126] = 12'h0f0;
    mem[127] = 12'h0f0;
    mem[128] = 12'h0f0;
    mem[129] = 12'h0f0;
    mem[130] = 12'h0f0;
    mem[131] = 12'h0f0;
    mem[132] = 12'h0f0;
    mem[133] = 12'h0f0;
    mem[134] = 12'h0f0;
    mem[135] = 12'h0f0;
    mem[136] = 12'h0f0;
    mem[137] = 12'h0f0;
    mem[138] = 12'h0f0;
    mem[139] = 12'h0f0;
    mem[140] = 12'h0f0;
    mem[141] = 12'h0f0;
    mem[142] = 12'h0f0;
    mem[143] = 12'h0f0;
    mem[144] = 12'h0f0;
    mem[145] = 12'h0f0;
    mem[146] = 12'h0f0;
    mem[147] = 12'h0f0;
    mem[148] = 12'h0f0;
    mem[149] = 12'h0f0;
    mem[150] = 12'h0f0;
    mem[151] = 12'h0f0;
    mem[152] = 12'h0f0;
    mem[153] = 12'h0f0;
    mem[154] = 12'h0f0;
    mem[155] = 12'h0f0;
    mem[156] = 12'h0f0;
    mem[157] = 12'h0f0;
    mem[158] = 12'h0f0;
    mem[159] = 12'h0f0;
    mem[160] = 12'h00f;
    mem[161] = 12'h00f;
    mem[162] = 12'h00f;
    mem[163] = 12'h00f;
    mem[164] = 12'h00f;
    mem[165] = 12'h00f;
    mem[166] = 12'h00f;
    mem[167] = 12'h00f;
    mem[168] = 12'h00f;
    mem[169] = 12'h00f;
    mem[170] = 12'h00f;
    mem[171] = 12'h00f;
    mem[172] = 12'h00f;
    mem[173] = 12'h00f;
    mem[174] = 12'h00f;
    mem[175] = 12'h00f;
    mem[176] = 12'h00f;
    mem[177] = 12'h00f;
    mem[178] = 12'h00f;
    mem[179] = 12'h00f;
    mem[180] = 12'h00f;
    mem[181] = 12'h00f;
    mem[182] = 12'h00f;
    mem[183] = 12'h00f;
    mem[184] = 12'h00f;
    mem[185] = 12'h00f;
    mem[186] = 12'h00f;
    mem[187] = 12'h00f;
    mem[188] = 12'h00f;
    mem[189] = 12'h00f;
    mem[190] = 12'h00f;
    mem[191] = 12'h00f;
    mem[192] = 12'h00f;
    mem[193] = 12'h00f;
    mem[194] = 12'h00f;
    mem[195] = 12'h00f;
    mem[196] = 12'h00f;
    mem[197] = 12'h00f;
    mem[198] = 12'h00f;
    mem[199] = 12'h00f;
    mem[200] = 12'hf00;
    mem[201] = 12'hf00;
    mem[202] = 12'hf00;
    mem[203] = 12'hf00;
    mem[204] = 12'hf00;
    mem[205] = 12'hf00;
    mem[206] = 12'hf00;
    mem[207] = 12'hf00;
    mem[208] = 12'hf00;
    mem[209] = 12'hf00;
    mem[210] = 12'hf00;
    mem[211] = 12'hf00;
    mem[212] = 12'hf00;
    mem[213] = 12'hf00;
    mem[214] = 12'hf00;
    mem[215] = 12'hf00;
    mem[216] = 12'hf00;
    mem[217] = 12'hf00;
    mem[218] = 12'hf00;
    mem[219] = 12'hf00;
    mem[220] = 12'hf00;
    mem[221] = 12'hf00;
    mem[222] = 12'hf00;
    mem[223] = 12'hf00;
    mem[224] = 12'hf00;
    mem[225] = 12'hf00;
    mem[226] = 12'hf00;
    mem[227] = 12'hf00;
    mem[228] = 12'hf00;
    mem[229] = 12'hf00;
    mem[230] = 12'hf00;
    mem[231] = 12'hf00;
    mem[232] = 12'hf00;
    mem[233] = 12'hf00;
    mem[234] = 12'hf00;
    mem[235] = 12'hf00;
    mem[236] = 12'hf00;
    mem[237] = 12'hf00;
    mem[238] = 12'hf00;
    mem[239] = 12'hf00;
    mem[240] = 12'hf00;
    mem[241] = 12'hf00;
    mem[242] = 12'hf00;
    mem[243] = 12'hf00;
    mem[244] = 12'hf00;
    mem[245] = 12'hf00;
    mem[246] = 12'hf00;
    mem[247] = 12'hf00;
    mem[248] = 12'hf00;
    mem[249] = 12'hf00;
    mem[250] = 12'hf00;
    mem[251] = 12'hf00;
    mem[252] = 12'hf00;
    mem[253] = 12'hf00;
    mem[254] = 12'hf00;
    mem[255] = 12'hf00;
    mem[256] = 12'hf00;
    mem[257] = 12'hf00;
    mem[258] = 12'hf00;
    mem[259] = 12'hf00;
    mem[260] = 12'h0f0;
    mem[261] = 12'h0f0;
    mem[262] = 12'h0f0;
    mem[263] = 12'h0f0;
    mem[264] = 12'h0f0;
    mem[265] = 12'h0f0;
    mem[266] = 12'h0f0;
    mem[267] = 12'h0f0;
    mem[268] = 12'h0f0;
    mem[269] = 12'h0f0;
    mem[270] = 12'h0f0;
    mem[271] = 12'h0f0;
    mem[272] = 12'h0f0;
    mem[273] = 12'h0f0;
    mem[274] = 12'h0f0;
    mem[275] = 12'h0f0;
    mem[276] = 12'h0f0;
    mem[277] = 12'h0f0;
    mem[278] = 12'h0f0;
    mem[279] = 12'h0f0;
    mem[280] = 12'h0f0;
    mem[281] = 12'h0f0;
    mem[282] = 12'h0f0;
    mem[283] = 12'h0f0;
    mem[284] = 12'h0f0;
    mem[285] = 12'h0f0;
    mem[286] = 12'h0f0;
    mem[287] = 12'h0f0;
    mem[288] = 12'h0f0;
    mem[289] = 12'h0f0;
    mem[290] = 12'h0f0;
    mem[291] = 12'h0f0;
    mem[292] = 12'h0f0;
    mem[293] = 12'h0f0;
    mem[294] = 12'h0f0;
    mem[295] = 12'h0f0;
    mem[296] = 12'h0f0;
    mem[297] = 12'h0f0;
    mem[298] = 12'h0f0;
    mem[299] = 12'h0f0;
    mem[300] = 12'h0f0;
    mem[301] = 12'h0f0;
    mem[302] = 12'h0f0;
    mem[303] = 12'h0f0;
    mem[304] = 12'h0f0;
    mem[305] = 12'h0f0;
    mem[306] = 12'h0f0;
    mem[307] = 12'h0f0;
    mem[308] = 12'h0f0;
    mem[309] = 12'h0f0;
    mem[310] = 12'h0f0;
    mem[311] = 12'h0f0;
    mem[312] = 12'h0f0;
    mem[313] = 12'h0f0;
    mem[314] = 12'h0f0;
    mem[315] = 12'h0f0;
    mem[316] = 12'h0f0;
    mem[317] = 12'h0f0;
    mem[318] = 12'h0f0;
    mem[319] = 12'h0f0;
  end
  reg [11:0] _0_;
  always @(posedge clk) begin
    if (read_port__en) begin
      _0_ <= mem[read_port__addr];
    end
  end
  assign produce__data = _0_;
  assign produce__vsync = pix_counter == (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:36" *) 9'h13f;
  assign \$1  = produce__valid & (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:60" *) produce__ready;
  assign \$2  = ! (* src = "C:\\Users\\magen\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.11_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python311\\site-packages\\amaranth\\hdl\\_dsl.py:486" *) fsm_state;
  assign \$4  = read_port__addr == (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:49" *) 9'h13f;
  assign \$5  = read_port__addr + (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:52" *) 1'h1;
  assign \$6  = read_port__en & (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:62" *) \$3 ;
  assign \$7  = pix_counter + (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:67" *) 1'h1;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\signature.py:18" *)
  always @(posedge clk)
    produce__valid <= \$8 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:39" *)
  always @(posedge clk)
    read_port__addr <= \$9 ;
  (* src = "C:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\\Lib\\contextlib.py:144" *)
  always @(posedge clk)
    fsm_state <= \$10 ;
  (* src = "C:\\Users\\magen\\Documents\\Programs\\gameboy\\ppu\\verify.py:32" *)
  always @(posedge clk)
    pix_counter <= \$11 ;
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    (* full_case = 32'd1 *)
    casez (fsm_state)
      1'h0:
          read_port__en = 1'h1;
      1'h1:
          read_port__en = \$1 ;
    endcase
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$8  = produce__valid;
    if (read_port__en) begin
      \$8  = 1'h1;
    end
    if (rst) begin
      \$8  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$9  = read_port__addr;
    if (read_port__en) begin
      (* full_case = 32'd1 *)
      if (\$4 ) begin
        \$9  = 9'h000;
      end else begin
        \$9  = \$5 [8:0];
      end
    end
    if (rst) begin
      \$9  = 9'h000;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$10  = fsm_state;
    casez (fsm_state)
      1'h0:
          \$10  = 1'h1;
    endcase
    if (rst) begin
      \$10  = 1'h0;
    end
  end
  always @* begin
    if (\$auto$verilog_backend.cc:2352:dump_module$1 ) begin end
    \$11  = pix_counter;
    if (\$6 ) begin
      (* full_case = 32'd1 *)
      if (produce__vsync) begin
        \$11  = 9'h000;
      end else begin
        \$11  = \$7 [8:0];
      end
    end
    if (rst) begin
      \$11  = 9'h000;
    end
  end
  assign pix_last = produce__vsync;
  assign counter = read_port__addr;
  assign read_port__data = produce__data;
  assign \produce__data.r  = produce__data[3:0];
  assign \produce__data.g  = produce__data[7:4];
  assign \produce__data.b  = produce__data[11:8];
  assign \read_port__data.r  = produce__data[3:0];
  assign \read_port__data.g  = produce__data[7:4];
  assign \read_port__data.b  = produce__data[11:8];
  assign \$3  = fsm_state;
endmodule
